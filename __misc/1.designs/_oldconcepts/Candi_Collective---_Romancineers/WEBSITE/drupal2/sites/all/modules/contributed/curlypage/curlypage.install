<?php
// $Id: curlypage.install,v 1.2.2.1 2009/11/17 00:41:07 manfer Exp $

/**
 * @file
 * Install file.
 */

define('CURLYPAGE_PATH_IMAGES', 'curlypage');

/**
 * Implementation of hook_install().
 */
function curlypage_install() {

  $result = drupal_install_schema('curlypage');

  if ($result[0]['success']) {
    if (module_exists('pageear')) {

      // Import pageears
      $pageears = array();
      $num_enabled_curlypages = 0;
      $result = db_query("SELECT * FROM {pageears} ORDER BY peid ASC");
      while ($pageear = db_fetch_object($result)) {

        $curlypage->cpid = $pageear->peid;
        $curlypage->status = $pageear->status;

        if ($curlypage->status) {
          $num_enabled_curlypages++;
        }

        $curlypage->name = $pageear->name;
        $curlypage->peel_position = $pageear->peelPosition;

        $directory_path = file_directory_path() .'/'. CURLYPAGE_PATH_IMAGES;
        // checks if directory exist and creates it if it don't
        file_check_directory($directory_path, FILE_CREATE_DIRECTORY, 'file_directory_path');

        $source_path = $pageear->smallURL;
        $parts = explode(".", $source_path);
        $extension = $parts[count($parts)-1];
        $dest_path = $directory_path .'/small_url_'. $pageear->peid .'.'. $extension;
        file_copy($source_path, $dest_path);
        $curlypage->small_url = $dest_path;

        $source_path = $pageear->bigURL;
        $parts = explode(".", $source_path);
        $extension = $parts[count($parts)-1];
        $dest_path = $directory_path .'/big_url_'. $pageear->peid .'.'. $extension;
        file_copy($source_path, $dest_path);
        $curlypage->big_url = $dest_path;

        $curlypage->mirror = $pageear->mirror;
        $curlypage->in_transition = $pageear->inTransition;
        $curlypage->transition_duration = $pageear->transitionDuration;
        $curlypage->peel_color = $pageear->peelColor;
        $curlypage->red_value = $pageear->redValue;
        $curlypage->green_value = $pageear->greenValue;
        $curlypage->blue_value = $pageear->blueValue;
        $curlypage->link_target = $pageear->linkTarget;
        $curlypage->link = $pageear->link;

        if ($pageear->loadSoundURL == '') {
          $curlypage->load_sound_url = '';
        }
        else {
          $source_path = $pageear->loadSoundURL;
          $dest_path = $directory_path .'/load_sound_url_'. $pageear->peid .'.mp3';
          file_copy($source_path, $dest_path);
          $curlypage->load_sound_url = $dest_path;
        }

        if ($pageear->openSoundURL == '') {
          $curlypage->open_sound_url = '';
        }
        else {
          $source_path = $pageear->openSoundURL;
          $dest_path = $directory_path .'/open_sound_url_'. $pageear->peid .'.mp3';
          file_copy($source_path, $dest_path);
          $curlypage->open_sound_url = $dest_path;
        }

        if ($pageear->closeSoundURL == '') {
          $curlypage->close_sound_url = '';
        }
        else {
          $source_path = $pageear->closeSoundURL;
          $dest_path = $directory_path .'/close_sound_url_'. $pageear->peid .'.mp3';
          file_copy($source_path, $dest_path);
          $curlypage->close_sound_url = $dest_path;
        }

        $curlypage->flag_speed = $pageear->flagSpeed;
        $curlypage->peel_speed = $pageear->peelSpeed;
        $curlypage->automatic_open = $pageear->automaticOpen;
        $curlypage->automatic_close = $pageear->automaticClose;
        $curlypage->close_button_enable = $pageear->close_button_enable;
        $curlypage->text_on_close_button = $pageear->text_on_close_button;
        $curlypage->close_red_value = $pageear->close_redValue;
        $curlypage->close_green_value = $pageear->close_greenValue;
        $curlypage->close_blue_value = $pageear->close_blueValue;
        $curlypage->languages = $pageear->languages;
        $curlypage->roles = $pageear->roles;
        $curlypage->visibility = $pageear->visibility;
        $curlypage->pages = $pageear->pages;
        $curlypage->flag_width = $pageear->flagWidth ? $pageear->flagWidth : 100;
        $curlypage->flag_height = $pageear->flagHeight ? $pageear->flagHeight : 100;
        $curlypage->peel_width = $pageear->peelWidth ? $pageear->peelWidth : 500;
        $curlypage->peel_height = $pageear->peelHeight ? $pageear->peelHeight : 500;
        $curlypage->flag_style = $pageear->flagStyle ? $pageear->flagStyle : 'style1';
        $curlypage->peel_style = $pageear->peelStyle ? $pageear->peelStyle : 'style1';
        $curlypage->peel_color_style = $pageear->peelColorStyle ? $pageear->peelColorStyle : 'gradient';
        $curlypage->weight = $pageear->weight ? $pageear->weight : 0;
        $curlypage->link_enabled = $pageear->linkEnabled ? $pageear->linkEnabled : 1;
        $curlypage->peel_position_model = $pageear->peelPositionModel ? $pageear->peelPositionModel : 'absolute';
        $curlypage->wait_enable = $pageear->waitEnable ? $pageear->waitEnable : 0;

        if ($pageear->waitURL) {
          $source_path = $pageear->waitURL;
          $parts = explode(".", $source_path);
          $extension = $parts[count($parts)-1];
          $dest_path = $directory_path .'/wait_url_'. $pageear->peid .'.'. $extension;
          file_copy($source_path, $dest_path);
          $curlypage->wait_url = $dest_path;
        }
        else {
          $curlypage->wait_url = drupal_get_path('module', 'curlypage') .'/curlypage/wait.gif';
        }

        $curlypage->wait_width = $pageear->waitWidth ? $pageear->waitWidth : 42;
        $curlypage->wait_height = $pageear->waitHeight ? $pageear->waitHeight : 42;

        _db_insert_curlypage($curlypage);

      }

      variable_set('num_enabled_curlypages', $num_enabled_curlypages);
      module_disable(array('pageear'));

    }
    else {

    // Insert an example curlypage
    $sql = "INSERT INTO {curlypages} (status, name, peel_position, small_url, big_url, mirror, in_transition, transition_duration, peel_color, red_value, green_value, blue_value, link_target, link, load_sound_url, open_sound_url, close_sound_url, flag_speed, peel_speed, automatic_open, automatic_close, close_button_enable, text_on_close_button, close_red_value, close_green_value, close_blue_value, languages, roles, visibility, pages, flag_width, flag_height, peel_width, peel_height, flag_style, peel_style, peel_color_style, weight, link_enabled, peel_position_model, wait_enable, wait_url, wait_width, wait_height)";
    $sql .= " VALUES ('%d', '%s', '%s', '%s', '%s', '%d', '%s', '%d', '%s', '%d', '%d', '%d', '%s', '%s', '%s', '%s', '%s', '%d', '%d', '%d', '%d', '%d', '%s', '%d', '%d', '%d', '%s', '%s', '%d', '%s', '%d', '%d', '%d', '%d', '%s', '%s', '%s', '%d', '%d', '%s', '%d', '%s', '%d', '%d')";
    $result = db_query($sql,
      array(
        ':status' => 0,
        ':name' => 'drupal',
        ':peel_position' => 'topright',
        ':small_url' => drupal_get_path('module', 'curlypage') .'/curlypage/small.jpg',
        ':big_url' => drupal_get_path('module', 'curlypage') .'/curlypage/big.jpg',
        ':mirror' => 1,
        ':in_transition' => 'Squeeze',
        ':transition_duration' => 4,
        ':peel_color' => 'custom',
        ':red_value' => 255,
        ':green_value' => 255,
        ':blue_value' => 255,
        ':link_target' => '_blank',
        ':link' => 'http://www.drupal.org/',
        ':load_sound_url' => '',
        ':open_sound_url' => '',
        ':close_sound_url' => '',
        ':flag_speed' => 4,
        ':peel_speed' => 4,
        ':automatic_open' => 0,
        ':automatic_close' => 0,
        ':close_button_enable' => 0,
        ':text_on_close_button' => 'close',
        ':close_red_value' => 100,
        ':close_green_value' => 100,
        ':close_blue_value' => 100,
        ':languages' => '',
        ':roles' => '',
        ':visibility' => 0,
        ':pages' => '',
        ':flag_width' => 100,
        ':flag_height' => 100,
        ':peel_width' => 500,
        ':peel_height' => 500,
        ':flag_style' => 'style1',
        ':peel_style' => 'style1',
        ':peel_color_style' => 'gradient',
        ':weight' => 0,
        ':link_enabled' => 1,
        ':peel_position_model' => 'absolute',
        ':wait_enable' => 0,
        ':wait_url' => drupal_get_path('module', 'curlypage') .'/curlypage/wait.gif',
        ':wait_width' => 42,
        ':wait_height' => 42
      ));

    }

  }
}


function _db_insert_curlypage($curlypage) {

  $sql = "INSERT INTO {curlypages} (status, name, peel_position, small_url, big_url, mirror, in_transition, transition_duration, peel_color, red_value, green_value, blue_value, link_target, link, load_sound_url, open_sound_url, close_sound_url, flag_speed, peel_speed, automatic_open, automatic_close, close_button_enable, text_on_close_button, close_red_value, close_green_value, close_blue_value, languages, roles, visibility, pages, flag_width, flag_height, peel_width, peel_height, flag_style, peel_style, peel_color_style, weight, link_enabled, peel_position_model, wait_enable, wait_url, wait_width, wait_height)";
  $sql .= " VALUES ('%d', '%s', '%s', '%s', '%s', '%d', '%s', '%d', '%s', '%d', '%d', '%d', '%s', '%s', '%s', '%s', '%s', '%d', '%d', '%d', '%d', '%d', '%s', '%d', '%d', '%d', '%s', '%s', '%d', '%s', '%d', '%d', '%d', '%d', '%s', '%s', '%s', '%d', '%d', '%s', '%d', '%s', '%d', '%d')";
  $result = db_query($sql,
    array(
      ':status' => $curlypage->status,
      ':name' => $curlypage->name,
      ':peel_position' => $curlypage->peel_position,
      ':small_url' => $curlypage->small_url,
      ':big_url' => $curlypage->big_url,
      ':mirror' => $curlypage->mirror,
      ':in_transition' => $curlypage->in_transition,
      ':transition_duration' => $curlypage->transition_duration,
      ':peel_color' => $curlypage->peel_color,
      ':red_value' => $curlypage->red_value,
      ':green_value' => $curlypage->green_value,
      ':blue_value' => $curlypage->blue_value,
      ':link_target' => $curlypage->link_target,
      ':link' => $curlypage->link,
      ':load_sound_url' => $curlypage->load_sound_url,
      ':open_sound_url' => $curlypage->open_sound_url,
      ':close_sound_url' => $curlypage->close_sound_url,
      ':flag_speed' => $curlypage->flag_speed,
      ':peel_speed' => $curlypage->peel_speed,
      ':automatic_open' => $curlypage->automatic_open,
      ':automatic_close' => $curlypage->automatic_close,
      ':close_button_enable' => $curlypage->close_button_enable,
      ':text_on_close_button' => $curlypage->text_on_close_button,
      ':close_red_value' => $curlypage->close_red_value,
      ':close_green_value' => $curlypage->close_green_value,
      ':close_blue_value' => $curlypage->close_blue_value,
      ':languages' => $curlypage->languages,
      ':roles' => $curlypage->roles,
      ':visibility' => $curlypage->visibility,
      ':pages' => $curlypage->pages,
      ':flag_width' => $curlypage->flag_width,
      ':flag_height' => $curlypage->flag_height,
      ':peel_width' => $curlypage->peel_width,
      ':peel_height' => $curlypage->peel_height,
      ':flag_style' => $curlypage->flag_style,
      ':peel_style' => $curlypage->peel_style,
      ':peel_color_style' => $curlypage->peel_color_style,
      ':weight' => $curlypage->weight,
      ':link_enabled' => $curlypage->link_enabled,
      ':peel_position_model' => $curlypage->peel_position_model,
      ':wait_enable' => $curlypage->wait_enable,
      ':wait_url' => $curlypage->wait_url,
      ':wait_width' => $curlypage->wait_width,
      ':wait_height' => $curlypage->wait_height
      ));

}

/**
 * Implementation of hook_disable().
 */
function curlypage_disable() {
  // Disable all enabled curlypages if the module is disabled.
  db_query("UPDATE {curlypages} SET status = 0 WHERE status = 1");

  // Update the persistent variable num_enabled_curlypages that tracks number of curlypages enabled
  variable_set('num_enabled_curlypages', 0);
}

/**
 * Deletes images and sounds used by curlypages.
 */
function delete_all_images_sounds() {

  $directory_path = file_directory_path() .'/'. CURLYPAGE_PATH_IMAGES;
  // if the directory where files reside does not exists nothing to do
  if (!file_check_directory($directory_path)) {
    return;
  }

  $result = db_query("SELECT c.cpid FROM {curlypages} c");
  while ($row = db_fetch_object($result)) {

    foreach (array('wait_url', 'small_url', 'big_url', 'load_sound_url', 'open_sound_url', 'close_sound_url') as $image_sound) {

      if ($image_sound == 'wait_url' || $image_sound == 'small_url' || $image_sound == 'big_url') {
        $extensions = array('.jpg', '.jpeg', '.gif', '.png', '.swf');
      }
      else {
        $extensions = array('.mp3');
      }

      foreach ($extensions as $extension) {

        $filename = $directory_path .'/'. $image_sound .'_'. $row->cpid;
        $filepath = $filename . $extension;
        file_delete($filepath);

        $i = 0;
        $filepath = $filename .'_'. $i . $extension;
        while (file_delete($filepath)) {
          $i += 1;
          $filepath = $filename .'_'. $i . $extension;
        }

      }

    }

  }

}

/**
 * Implementation of hook_uninstall().
 */
function curlypage_uninstall() {
  // Delete all images and sounds used by curlypage
  delete_all_images_sounds();
  // Delete persistent variables.
  variable_del('num_enabled_curlypages');
  // Drop the associated schema(s).
  drupal_uninstall_schema('curlypage');
}

/**
 * Implementation of hook_schema().
 */
function curlypage_schema() {
  $schema['curlypages'] = array(
    'description' => 'Stores curlypage settings.',
    'fields' => array(
      'cpid' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique curlypage ID.',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Pageear enabled status. (1 = enabled, 0 = disabled).',
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => 'Sample Pageear',
        'description' => 'Name of the curlypage. The name will be added to the curlypage class to enable custom theming.',
      ),
      'flag_style' => array(
        'type' => 'varchar',
        'length' => 7,
        'not null' => TRUE,
        'default' => 'style1',
        'description' => 'Style of flag.',
      ),
      'peel_style' => array(
        'type' => 'varchar',
        'length' => 7,
        'not null' => TRUE,
        'default' => 'style1',
        'description' => 'Style of peel.',
      ),
      'peel_position' => array(
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => 'topright',
        'description' => 'Position of curlypage. (topleft, topright, bottomleft or bottomright).',
      ),
      'peel_position_model' => array(
        'type' => 'varchar',
        'length' => 9,
        'not null' => TRUE,
        'default' => 'absolute',
        'description' => 'Position Model of curlypage. (absolute or fixed).',
      ),
      'wait_enable' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Wait icon enabled status. (1 = enabled, 0 = disabled).',
      ),
      'wait_url' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'URL of the image to show while the ad is loading.',
      ),
      'wait_width' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 42,
        'size' => 'normal',
        'description' => 'Width of wait icon.',
      ),
      'wait_height' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 42,
        'size' => 'normal',
        'description' => 'Height of wait icon.',
      ),
      'flag_width' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 100,
        'size' => 'normal',
        'description' => 'Width of flag.',
      ),
      'flag_height' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 100,
        'size' => 'normal',
        'description' => 'Height of flag.',
      ),
      'peel_width' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 500,
        'size' => 'normal',
        'description' => 'Width of peel.',
      ),
      'peel_height' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 500,
        'size' => 'normal',
        'description' => 'Height of peel.',
      ),
      'small_url' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'URL of the image to show when the ad is not peeled.',
      ),
      'big_url' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'URL of the image to show when the ad is peeled.',
      ),
      'mirror' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
        'description' => 'Mirror the ad on the back of the peeled page. (1 = enabled, 0 = disabled).',
      ),
      'in_transition' => array(
        'type' => 'varchar',
        'length' => 15,
        'not null' => TRUE,
        'default' => 'none',
        'description' => 'In Transition when curlypage is loaded.',
      ),
      'transition_duration' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 4,
        'size' => 'tiny',
        'description' => 'Duration of in transition.',
      ),
      'peel_color_style' => array(
        'type' => 'varchar',
        'length' => 9,
        'not null' => TRUE,
        'default' => 'gradient',
        'description' => 'The color on peel can be a flat color or a gradient.',
      ),
      'peel_color' => array(
        'type' => 'varchar',
        'length' => 7,
        'not null' => TRUE,
        'default' => 'custom',
        'description' => 'If the mirror effect is disabled, this color will be used on the back.',
      ),
      'red_value' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 255,
        'size' => 'tiny',
        'description' => 'Red value of Custom Color for the Peel (0 - 255).',
      ),
      'green_value' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 255,
        'size' => 'tiny',
        'description' => 'Green value of Custom Color for the Peel (0 - 255).',
      ),
      'blue_value' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 255,
        'size' => 'tiny',
        'description' => 'Blue value of Custom Color for the Peel (0 - 255).',
      ),
      'link_enabled' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
        'description' => 'Enabled or disabled link. (1 = enabled, 0 = disabled).',
      ),
      'link_target' => array(
        'type' => 'varchar',
        'length' => 7,
        'not null' => TRUE,
        'default' => '_blank',
        'description' => 'Where to open the URL.',
      ),
      'link' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => 'http://www.drupal.org/',
        'description' => 'URL to go when user click on the ad.',
      ),
      'load_sound_url' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'URL of mp3 file to play when the ad is loaded.',
      ),
      'open_sound_url' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'URL of mp3 file to play when the peel is opened.',
      ),
      'close_sound_url' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'URL of mp3 file to play when the peel is closed.',
      ),
      'flag_speed' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 4,
        'size' => 'tiny',
        'description' => 'Speed for the motion in the unpeeled state.',
      ),
      'peel_speed' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 4,
        'size' => 'tiny',
        'description' => 'Speed for the motion in the peeled state.',
      ),
      'automatic_open' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'normal',
        'description' => 'Millisecons to unpeel automatically after the curlypage loads.',
      ),
      'automatic_close' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'normal',
        'description' => 'Millisecons to automatically close after unpeeling.',
      ),
      'close_button_enable' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Show a close button on open peel.',
      ),
      'text_on_close_button' => array(
        'type' => 'varchar',
        'length' => 20,
        'not null' => TRUE,
        'default' => 'close',
        'description' => 'Text on clickable close button.',
      ),
      'close_red_value' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 255,
        'size' => 'tiny',
        'description' => 'Color red value of close button (0 - 255).',
      ),
      'close_green_value' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 255,
        'size' => 'tiny',
        'description' => 'Color green value of close button (0 - 255).',
      ),
      'close_blue_value' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 255,
        'size' => 'tiny',
        'description' => 'Color blue value of close button (0 - 255).',
      ),
      'languages' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The language visibility of the curlypage. Comma separated string of language names.',
      ),
      'roles' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The role visibility of the curlypage. Comma separated string of role ids (rid).',
      ),
      'visibility' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Flag to indicate how to show curlypages on pages. (0 = Show on all pages except listed pages, 1 = Show only on listed pages, 2 = Use custom PHP code to determine visibility)',
      ),
      'pages' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Contents of the "Pages" textarea; contains either a list of paths on which to include/exclude the curlypage or PHP code, depending on "visibility" setting.',
      ),
    ),
    'primary key' => array('cpid'),
    'indexes' => array(
      'list' => array('status'),
    ),
  );

  return $schema;
}
