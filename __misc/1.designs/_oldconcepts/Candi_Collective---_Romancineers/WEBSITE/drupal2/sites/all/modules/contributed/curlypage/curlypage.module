<?php
// $Id: curlypage.module,v 1.2.2.1 2009/12/28 12:29:53 manfer Exp $

/**
 * @file
 * Shows configurable peel away ad (magic corner, peelad) to your website.
 *
 * Acknowledgement: Some of the code and way of doing things were borrowed from corner and block modules.
 */

define('CURLYPAGE_PATH_IMAGES', 'curlypage');

/**
 * Implementation of hook_help().
 */
function curlypage_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#description':
      return t('Add a peel away ad (magic corner, peelad) to your website.');
    case 'admin/build/curlypage':
      $params = array('!add_new' => l(t('add curlypage page'), 'admin/build/curlypage/add'), '%edit' => t('edit'));
      return t('Curlypages are peelads which are shown at a \'corner\' of your pages. Create new curlypages on the !add_new or edit existing curlypages by clicking the %edit link next to each one.', $params);
  }
}


/**
 * Implementation of hook_init().
 */
function curlypage_init() {

  $num_active = variable_get('num_enabled_curlypages', 0);
  $current_topleft_curlypage = FALSE;
  $current_topright_curlypage = FALSE;
  $current_bottomleft_curlypage = FALSE;
  $current_bottomright_curlypage = FALSE;

  // Add the JS only if we have any active curlypage.
  // Test if curlypages must be displayed in this node
  // and prepare to write them.
  if ($num_active) {

    // Fetch all active curlypages.
    // TODO: cache?
    $curlypages = array();
    $result = db_query("SELECT * FROM {curlypages} WHERE status = 1 ORDER BY weight ASC, cpid ASC");
    while ($curlypage = db_fetch_object($result)) {
      $curlypages[] = $curlypage;
    }

    global $user;
    global $language;
    $rids = array_keys($user->roles);
    $lang_name = $language->language;

    // Curlypages for the current path/role/language.
    // If more than one are configured on same corner for this path/role/language,
    // only first would be presented.
    foreach ($curlypages as $curlypage) {

      // if a topleft curlypage is just set continue checking next curlypage
      if ($curlypage->peel_position == 'topleft' && $current_topleft_curlypage) {
        continue;
      }

      // if a topright curlypage is just set continue checking next curlypage
      if ($curlypage->peel_position == 'topright' && $current_topright_curlypage) {
        continue;
      }

      // if a bottomleft curlypage is just set continue checking next curlypage
      if ($curlypage->peel_position == 'bottomleft' && $current_bottomleft_curlypage) {
        continue;
      }

      // if a bottomright curlypage is just set continue checking next curlypage
      if ($curlypage->peel_position == 'bottomright' && $current_bottomright_curlypage) {
        continue;
      }

      // Get the settings
      $vis_languages = explode(',', $curlypage->languages);
      $vis_roles = explode(',', $curlypage->roles);
      $vis_vis = $curlypage->visibility;
      $vis_pages = $curlypage->pages;

      // Match languages
      if (module_exists('locale') && count(array_filter($vis_languages))) {
        $lang_enabled = in_array($lang_name, $vis_languages);
      }
      else {
        $lang_enabled = TRUE;
      }

      // Match roles
      if (count(array_filter($vis_roles))) {
        $role_enabled = count(array_intersect($vis_roles, $rids)) ? TRUE : FALSE;
      }
      else {
        $role_enabled = TRUE;
      }

      // Match path if necessary
      if ($vis_pages) {
        if ($vis_vis < 2) {
          $path = drupal_get_path_alias($_GET['q']);
          // Compare with the internal and path alias (if any).
          $page_match = drupal_match_path($path, $vis_pages);
          if ($path != $_GET['q']) {
            $page_match = $page_match || drupal_match_path($_GET['q'], $vis_pages);
          }
          // When $vis_vis has a value of 0, the pageear is displayed on
          // all pages except those listed in $vis_pages. When set to 1, it
          // is displayed only on those pages listed in $vis_pages.
          $page_match = !($vis_vis xor $page_match);
        }
        else {
          $page_match = drupal_eval($vis_pages);
        }
      }
      else {
        $page_match = TRUE;
      }

      // Generate curlypages if enabled for current path, role and language
      if ($lang_enabled === TRUE && $role_enabled === TRUE && $page_match) {

        // Prepare the curlypage objects to adjust them to curlypage javascript needs
        switch ($curlypage->peel_position) {
          case 'topleft':
            $current_topleft_curlypage = curlypage_prepare($curlypage);
            break;
          case 'topright':
            $current_topright_curlypage = curlypage_prepare($curlypage);
            break;
          case 'bottomleft':
            $current_bottomleft_curlypage = curlypage_prepare($curlypage);
            break;
          case 'bottomright':
            $current_bottomright_curlypage = curlypage_prepare($curlypage);
            break;
          default:
            break;
        }

        // If all curlypages are just set, there is not need to continue
        // analyzing the rest of curlypages. Write curlypages and return.
        if ($current_topleft_curlypage && $current_topright_curlypage && $current_bottomleft_curlypage && $current_bottomright_curlypage) {
          write_curlypages($current_topleft_curlypage, $current_topright_curlypage, $current_bottomleft_curlypage, $current_bottomright_curlypage);
          return;
        }

      }
    }

    // All enabled curlypages have been analyzed. Write curlypages.
    if ($current_topleft_curlypage || $current_topright_curlypage || $current_bottomleft_curlypage || $current_bottomright_curlypage) {
      write_curlypages($current_topleft_curlypage, $current_topright_curlypage, $current_bottomleft_curlypage, $current_bottomright_curlypage);
    }

  }

}

/**
 * Implementation of hook_perm().
 */
function curlypage_perm() {
  return array('administer curlypages', 'use PHP for curlypage visibility');
}

/**
 * Implementation of hook_menu().
 */
function curlypage_menu() {
  $items = array();
  $items['admin/build/curlypage'] = array(
    'title' => 'Curlypages',
    'description' => 'Edit curlypages, how they look and where they appear on the site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('curlypage_list_form'),
    'access arguments' => array('administer curlypages'),
    'file' => 'curlypage.admin.inc',
  );
  $items['admin/build/curlypage/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/build/curlypage/add'] = array(
    'title' => 'Add curlypage',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('curlypage_admin_edit', NULL, 'add'),
    'access arguments' => array('administer curlypages'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'curlypage.admin.inc',
  );
  $items['admin/build/curlypage/%curlypage/edit'] = array(
    'title' => 'Edit curlypage',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('curlypage_admin_edit', 3),
    'access arguments' => array('administer curlypages'),
    'type' => MENU_CALLBACK,
    'file' => 'curlypage.admin.inc',
  );
  $items['admin/build/curlypage/%curlypage/clone'] = array(
    'title' => 'Clone curlypage',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('curlypage_admin_edit', 3, 'clone'),
    'access arguments' => array('administer curlypages'),
    'type' => MENU_CALLBACK,
    'file' => 'curlypage.admin.inc',
  );
  $items['admin/build/curlypage/%curlypage/delete'] = array(
    'title' => 'Delete curlypage',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('curlypage_admin_delete', 3),
    'access arguments' => array('administer curlypages'),
    'type' => MENU_CALLBACK,
    'file' => 'curlypage.admin.inc',
  );
  $items['admin/build/curlypage/%curlypage/disable'] = array(
    'title' => 'Disables curlypage',
    'page callback' => 'curlypage_admin_disable',
    'page arguments' => array(3),
    'access arguments' => array('administer curlypages'),
    'type' => MENU_CALLBACK,
    'file' => 'curlypage.admin.inc',
  );
  $items['admin/build/curlypage/%curlypage/enable'] = array(
    'title' => 'Enables curlypage',
    'page callback' => 'curlypage_admin_enable',
    'page arguments' => array(3),
    'access arguments' => array('administer curlypages'),
    'type' => MENU_CALLBACK,
    'file' => 'curlypage.admin.inc',
  );

  return $items;
}

/**
 * Output curlypages.
 */
function write_curlypages($current_topleft_curlypage = FALSE, $current_topright_curlypage = FALSE, $current_bottomleft_curlypage = FALSE, $current_bottomright_curlypage = FALSE) {

  if ($current_topleft_curlypage || $current_topright_curlypage || $current_bottomleft_curlypage || $current_bottomright_curlypage) {

    // load external swfobject.js library
    $swfobjectjs = '<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/swfobject/2.2/swfobject.js"></script>';
    drupal_set_html_head($swfobjectjs);

    $path = drupal_get_path('module', 'curlypage');
    drupal_add_js($path .'/curlypage/curlypage.js', 'module', 'header', FALSE, FALSE, TRUE);
    drupal_add_css($path .'/curlypage/curlypage.css', 'module', 'all', TRUE);

    // Output curlypages if there is one for current node
    $js = "flag_swf = '". $base_url . base_path() . drupal_get_path('module', 'curlypage') ."/curlypage/flag.swf';\n";
    $js .= "peel_swf = '". $base_url . base_path() . drupal_get_path('module', 'curlypage') ."/curlypage/turn.swf';\n";

    if ($current_topleft_curlypage) {
      $js .= "topleft_curlypage_vars = {\n";
      foreach ($current_topleft_curlypage as $key => $value) {
        $js .= $key .": escape(". drupal_to_js($value) ."),\n";
      }
      $js = substr_replace($js, "", -2, 1);
      $js .= "};\n";

      $js .= "topleft_curlypage = new curlypage(topleft_curlypage_vars);\n";
      $js .= "topleft_curlypage.write();\n";
    }

    if ($current_topright_curlypage) {
      $js .= "topright_curlypage_vars = {\n";
      foreach ($current_topright_curlypage as $key => $value) {
        $js .= $key .": escape(". drupal_to_js($value) ."),\n";
      }
      $js = substr_replace($js, "", -2, 1);
      $js .= "};\n";

      $js .= "topright_curlypage = new curlypage(topright_curlypage_vars);\n";
      $js .= "topright_curlypage.write();\n";
    }

    if ($current_bottomleft_curlypage) {
      $js .= "bottomleft_curlypage_vars = {\n";
      foreach ($current_bottomleft_curlypage as $key => $value) {
        $js .= $key .": escape(". drupal_to_js($value) ."),\n";
      }
      $js = substr_replace($js, "", -2, 1);
      $js .= "};\n";

      $js .= "bottomleft_curlypage = new curlypage(bottomleft_curlypage_vars);\n";
      $js .= "bottomleft_curlypage.write();\n";
    }

    if ($current_bottomright_curlypage) {
      $js .= "bottomright_curlypage_vars = {\n";
      foreach ($current_bottomright_curlypage as $key => $value) {
        $js .= $key .": escape(". drupal_to_js($value) ."),\n";
      }
      $js = substr_replace($js, "", -2, 1);
      $js .= "};\n";

      $js .= "bottomright_curlypage = new curlypage(bottomright_curlypage_vars);\n";
      $js .= "bottomright_curlypage.write();\n";
    }

    drupal_add_js($js, 'inline', 'footer');

  }

}

/**
 * Prepares a curlypage object prior to being use in JS.
 *
 * @param $curlypage A curlypage object
 * @return A prepared curlypage object
 */
function curlypage_prepare($curlypage) {

  // No need to carry over these values to JS
  unset($curlypage->cpid);
  unset($curlypage->name);
  unset($curlypage->status);
  unset($curlypage->roles);
  unset($curlypage->visibility);
  unset($curlypage->pages);
  unset($curlypage->languages);
  unset($curlypage->weight);

  // Construct the image and sound paths
  $curlypage->wait_url        = base_path() . check_plain($curlypage->wait_url);
  $curlypage->small_url       = base_path() . check_plain($curlypage->small_url);
  $curlypage->big_url         = base_path() . check_plain($curlypage->big_url);
  $curlypage->load_sound_url  = ($curlypage->load_sound_url == '') ? '' : base_path() . check_plain($curlypage->load_sound_url);
  $curlypage->open_sound_url  = ($curlypage->open_sound_url == '') ? '' : base_path() . check_plain($curlypage->open_sound_url);
  $curlypage->close_sound_url = ($curlypage->close_sound_url == '') ? '' : base_path() . check_plain($curlypage->close_sound_url);

  // Convert automatic_open, automatic_close from seconds to milliseconds
  $curlypage->automatic_open  = $curlypage->automatic_open * 1000 .'';
  $curlypage->automatic_close = $curlypage->automatic_close * 1000 .'';

  // Check plain link and text on close button
  $curlypage->link = check_plain($curlypage->link);
  $curlypage->text_on_close_button = check_plain($curlypage->text_on_close_button);

  return  $curlypage;

}

/**
 * Loading one, more or all curlypages.
 */
function curlypage_load($cpid = NULL) {
  static $curlypages;

  if (!is_array($curlypages)) {

    if (is_numeric($cpid)) {
      $curlypage = db_fetch_object(db_query("SELECT * FROM {curlypages} WHERE cpid = %d", array(':cpid' => $cpid)));
      return $curlypage;

    }
    else {
      $result = db_query("SELECT * FROM {curlypages} ORDER BY weight ASC");
      $curlypages = array();

      while ($curlypage = db_fetch_object($result)) {
        $curlypages[$curlypage->cpid] = $curlypage;
      }
    }
  }

  if (is_array($curlypages)) {

    if (is_numeric($cpid)) {
      return $curlypages[$cpid];
    }
    elseif (is_array($cpid)) {
      return array_intersect_key($curlypages, array_flip($cpid));
    }
    else {
      return $curlypages;
    }
  }
}

/**
 * Get the default values of a new curlypage
 */
function curlypage_get_default() {

  $default = new stdClass();

  $default->cpid                   = 0;
  $default->weight                 = 0;
  $default->status                 = 1;
  $default->name                   = '';
  $default->flag_style             = 'style1';
  $default->peel_style             = 'style1';
  $default->peel_position          = 'topright';
  $default->peel_position_model    = 'absolute';
  $default->flag_width             = 100;
  $default->flag_height            = 100;
  $default->peel_width             = 500;
  $default->peel_height            = 500;
  $default->wait_enable            = 0;
  $default->wait_url               = drupal_get_path('module', 'curlypage') .'/curlypage/wait.gif';
  $default->wait_width             = 42;
  $default->wait_height            = 42;
  $default->small_url              = drupal_get_path('module', 'curlypage') .'/curlypage/small.jpg';
  $default->big_url                = drupal_get_path('module', 'curlypage') .'/curlypage/big.jpg';
  $default->mirror                 = 1;
  $default->in_transition          = 'none';
  $default->transition_duration    = 4;
  $default->peel_color             = 'custom';
  $default->peel_color_style       = 'gradient';
  $default->red_value              = 255;
  $default->green_value            = 255;
  $default->blue_value             = 255;
  $default->link_enabled           = 1;
  $default->link_target            = '_blank';
  $default->link                   = 'http://www.drupal.org/';
  $default->load_sound_url         = '';
  $default->open_sound_url         = '';
  $default->close_sound_url        = '';
  $default->flag_speed             = 4;
  $default->peel_speed             = 4;
  $default->automatic_open         = 0;
  $default->automatic_close        = 0;
  $default->close_button_enable    = 0;
  $default->text_on_close_button   = 'close';
  $default->close_red_value        = 255;
  $default->close_green_value      = 255;
  $default->close_blue_value       = 255;
  $default->languages              = '';
  $default->roles                  = '';
  $default->visibility             = 0;
  $default->pages                  = '';

  return (object) $default;

}

/**
 * Returns either an array of select options or, if a key is specified, the value for the specific key in the given array.
 *
 * @param $type
 * @param $key A key corresponding to a specific entry in one of the options arrays
 * @return mixed
 */
function curlypage_get_options($type, $key = '') {
  switch ($type) {
    case 'flag_style':
      $options = array(
        'style1' => t('Style') .' 1',
        'style2' => t('Style') .' 2',
        'style3' => t('Style') .' 3',
      );
      break;
    case 'peel_style':
      $options = array(
        'style1' => t('Style') .' 1',
        'style2' => t('Style') .' 2',
        'style3' => t('Style') .' 3',
      );
      break;
    case 'peel_position':
      $options = array(
        'topleft'     => t('Top left'),
        'topright'    => t('Top right'),
        'bottomleft'  => t('Bottom left'),
        'bottomright' => t('Bottom right'),
      );
      break;
    case 'peel_position_model':
      $options = array(
        'absolute'  => t('absolute'),
        'fixed'     => t('fixed'),
      );
      break;
    case 'in_transition':
      $options = array(
        'none'          => t('(disabled)'),
        'Blinds'        => t('Blinds'),
        'Fade'          => t('Fade'),
        'Fly'           => t('Fly'),
        'Iris'          => t('Iris'),
        'Photo'         => t('Photo'),
        'Rotate'        => t('Rotate'),
        'Squeeze'       => t('Squeeze'),
        'Wipe'          => t('Wipe'),
        'PixelDissolve' => t('PixelDissolve'),
        'Zoom'          => t('Zoom')
      );
      break;
    case 'peel_color':
      $options = array(
        'golden' => t('Golden'),
        'silver' => t('Silver'),
        'custom' => t('Custom'),
      );
      break;
    case 'peel_color_style':
      $options = array(
        'flat'     => t('Flat'),
        'gradient' => t('Gradient'),
      );
      break;
    case 'link_target':
      $options = array(
        '_self'  => t('Same window'),
        '_blank' => t('New window'),
      );
      break;
    default:
      $options = array();
  }

  if ($key == '') {
    return $options;
  }
  else {
    return $options[$key];
  }
}

/**
 * Implementation of hook_theme().
 */
function curlypage_theme() {
  return array(
    'curlypage_list_form' => array('arguments' => array('form' => NULL)),
  );
}
